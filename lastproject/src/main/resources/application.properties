# Spring Boot 특징
# 1. Tomcat이 내장되어있음( 각각의 프로젝트 마다 ) 
# Tomcat server port 설정
server.port=8088
server.servlet.context-path=/
server.servlet.session.timeout=10m
server.servlet.session.tracking-modes=cookie

# application.properties
# 전반적인 모든 서버 설정
# DB연결, JPA 설정
# DBCP 설정( 4가지 )
# SpringBoot에는 HikariCP 내장
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

spring.datasource.url=jdbc:mysql://project-db-stu.ddns.net:3307/smhrd7_hc

spring.datasource.username=smhrd7_hc

spring.datasource.password=1234

# JPA 설정
# JPA( JDBC + API ) <---> hibernate(구현체)
# mapper <---> SqlSessionFactoryBean(구현체) 

# 1. 어떤 DB 문법에 맞춰서 작성할 것인지
spring.jpa.database-platform=org.hibernate.dialect.MySQL5Dialect

# 2. VO를 설정했을 때, 우리 서버가 재시작할 때마다 무슨 작업을 진행할 것이냐.
# DDL ==> 테이블 생성
# create : 서버 재시작마다 테이블 생성
# update : 서버 재시작마다 테이블 수정
spring.jpa.hibernate.ddl-auto=update

# 3. SQL문이 실행될 때, 콘솔창에 실행되는 SQL문을 출력
spring.jpa.show-sql=true

# 4. SQL문 포맷팅해서 보여주기
spring.jpa.properties.hibernate.format_sql= true

# spring 시큐리티 기본 계정 및 비밀번호 설정
# spring.security.user.name=smhrd7_hc
# spring.security.user.password=1234

# Thymeleaf 탬플릿 연결
spring.thymeleaf.cache=false
spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html

## jpa
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
spring.mvc.hiddenmethod.filter.enabled=true 

## android 설정
server.tomcat.max-http-header-size=65536